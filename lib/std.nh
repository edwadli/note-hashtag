include array
include io
include math
include types

fun Ignore x = ()

const eighth = 0.125
const e = eighth
const quarter = 0.25
const q = quarter
const triplet = 0.25 / 3.0
const t = triplet
const half = 0.5
const h = 0.5
const whole = 1.0
const w = whole

type key_signature = {
  scale = { 261.63 293.66 329.63 349.23 392.00 440.00 493.88 }
}

const f3 = 174.61
const fs3 = 185.00
const g3 = 196.00
const gs3 = 207.65
const a3 = 220.00
const as3 = 233.08
const b3 = 246.94
const c4 = 261.63
const cs4 = 277.18
const d4 = 293.66
const ds4 = 311.13
const e4 = 329.63
const f4 = 349.23
const fs4 = 369.99
const g4 = 392.00
const gs4 = 415.30
const a4 = 440.00
const as4 = 466.16
const b4 = 493.88
const c5 = 523.25
const cs5 = 554.37
const d5 = 587.33
const ds5 = 622.25
const e5 = 659.25
const f5 = 698.46

const c_major = init key_signature
const c_minor = init key_signature{ scale={ c4 d4 ds4 f4 g4 gs4 as4 } }
const f_minor = init key_signature{ scale={ f3 g3 gs3 as3 c4 cs4 ds4 } }
const f_major = init key_signature{ scale={ f3 g3 a3 as3 c4 d4 e4 } }
const fsharp_major = init key_signature{ scale={ fs3 gs3 as3 b3 cs4 ds4 f4 } }
const d_major = init key_signature{ scale={ d4 e4 fs4 g4 a4 b4 cs5 } }
const g_major = init key_signature{ scale={ g3 a3 b3 c4 d4 e4 fs4 } }

type time_signature = {
  upper = 4
  lower = 4
}

const two_two = init time_signature{ upper=2; lower=2 }

type pitch = {
  rank = 1
  octave = 0
  offset = 0
}

type chord = {
  pitches = pitch{}
}

//Returns a chord containing the given pitch
fun ChordOfPitch p = init chord { pitches = {p} }

fun PitchOfInt i = (
  //Returns a pitch with the given rank
  if (i < 0) || (i > (Size key_sig$scale)) then (
    throw "Could not construct pitch from int";
    init pitch)
  else
    init pitch { rank = i }
)

fun NormalizePitch p keysig = (
  //Returns a valid pitch with a rank between 0 and the length of the key signature
  scale_size = Size keysig$scale
  if p$rank < 1 then (
    octave_offset = (-1 * p$rank) / scale_size + 1
    p$rank = p$rank + octave_offset * scale_size
    p$octave = p$octave - octave_offset
  ) else (
    p$rank = p$rank - 1 // Make normalization easier. Pitch is [1, 7] -> [0, 6]
    p$octave = p$octave + p$rank / scale_size
    p$rank = p$rank % scale_size
    p$rank = p$rank + 1 // Undo our change: [0, 6] -> [1, 7]
  )
  p
)

//Returns a pitch shifted up by the given octave
fun AddPitchOctave p octaves = ( p$octave = p$octave + octaves; p)

fun AddPitchNum num p keysig = (
  //Returns a pitch object shifted up by num for the given p and key signature
  p$rank = p$rank + num
  NormalizePitch p keysig
)

fun AddChordNum num ch keysig = (
  //Returns a chord with all the notes of ch shifted up by num for the given key signature.
  out_pitch = pitch{}
  for p in ch$pitches do
    out_pitch = out_pitch . { (AddPitchNum num p keysig) }
  ch$pitches = out_pitch
  ch
)

fun PrintChord ch = (
  //Prints each pitch of chord
  size = Size ch
  for c in ch do (
    x = c$pitches
    for p in x do
      Print (StringOfInt p$rank)
    Print "\n"
  )
)

fun PrintRhythms rh = (
  //Prints each duration inside rh
  size = Size rh
  for r in rh do (
    Print (StringOfFloat r)
  )
)


type track = {
  key_sig = init key_signature
  time_sig = init time_signature
  tempo = 120
  chords = chord{}
  durations = float{}
  // currently we can only assign a single volume to the track
  // of dynamics control we lack
  // yes, it's a simplicity hack
  // but i'd like to hit the sack
  volume = 1.0
}

type song = {
  tracks = track{}{}
  volumes = float{}
}

//Flats the pitch
fun FlatPitch p = ( p$offset = p$offset - 1; p )
//Sharps the pitch
fun SharpPitch p = ( p$offset = p$offset + 1; p )

fun ChordOfChords c1 c2 = (
  //Returns a chord object containing the union of pitches in both chords
  c = init chord
  for p in c1$pitches . c2$pitches
    do if IsMember c$pitches p then () else c$pitches = c$pitches . {p}
  c
)

fun Rest = init chord

fun ConcatTracks t1 t2 = (
  // Returns a new track with the tracks arranged sequentially 
  //(use the . operator instead)
  if t1$key_sig == t2$key_sig &&\
      t1$time_sig == t2$time_sig &&\
      t1$tempo == t2$tempo
  then (
    t1$chords = t1$chords . t2$chords
    t1$durations = t1$durations . t2$durations
    t1
  )
  else (throw "Cannot concat tracks with different key or time signature or tempo"; t1)
)

key_sig = init key_signature
time_sig = init time_signature
tempo = 120

fun ZipSame f c = (
  if (Size f) != (Size c) then
    (throw "Cannot Zip Arrays of Different Lengths"; init track)
  else(
    init track{chords = c; durations = f;key_sig = key_sig
              time_sig = time_sig; tempo = tempo}
  )
)

fun ZipDiff f c = (
  out_f = f
  out_c = c
  if (Size f) == 1 then(
    iter = Size c
    out_f = SameList f.(0) iter
  )
  else (
    iter = Size f
    out_c = SameList c.(0) iter
  )
  init track{chords = out_c; durations = out_f; key_sig = key_sig
              time_sig = time_sig; tempo = tempo}
)

fun Scale pitch_start pitch_end = (
  //Returns an array of chords representing the scale in the current key signature 
  //between pitch_start and pitch_end
  c = chord{}
  oct_diff = pitch_end$octave - pitch_start$octave
  pitch_diff = pitch_end$rank - pitch_start$rank
  total_diff = (Size key_sig$scale) * oct_diff + pitch_diff
  direction = be 1 unless total_diff < 0 inwhichcase -1
  for x in Range 0 (direction * total_diff + 1) do
    c = c . [(AddPitchNum (direction*x) pitch_start key_sig)]
  c
)

extern "support.hpp" "nh_support" "render_impl" fun RenderImpl float{}{}{} float{}{} float{} string -> unit

fun Render song filename = (
  //Creates a WAV file of the song
  if Size song$tracks != Size song$volumes then throw "Internal error: song has mismatched tracks and volumes" else ()
  freqs = float{}{}{}
  durs = float{}{}
  for track_chan in song$tracks do (
    freq_chan = float{}{}
    dur_chan = float{}
    for track in track_chan do (
      freq_chan = freq_chan . FrequenciesOfChords track$chords track$key_sig
      dur_chan = dur_chan . SecondsOfDurations track$durations track$time_sig track$tempo
    )
    freqs = freqs . { freq_chan }
    durs = durs . { dur_chan }
  )
  RenderImpl freqs durs song$volumes filename
)

fun ChromaticOfFrequency base_frequency frequency = (
  //Computes the offset of frequency relative to base_frequency
  Log (frequency/base_frequency) / Log 2.0 * 12.0
)

fun FrequencyOfChromatic base_frequency chromatic = (
  //Computes the frequency for the given chromatic
  base_frequency * Pow 2.0 (chromatic/12.0)
)

fun OffsetFrequency frequency offset = (
  //Returns the frequency for the given offset
  // this function should be overridden by the user if using non chromatic scales
  // how a flat or sharp affects the music helps tell a different tale
  base_freq = 440.0
  FrequencyOfChromatic base_freq (ChromaticOfFrequency base_freq frequency + offset)
)

fun FrequencyOfPitch pitch keysig = (
  //Returns the frequency of the pitch for the given key signature
  index = pitch$rank - 1
  frequency = keysig$scale.(index) * Pow 2.0 (FloatOfInt pitch$octave)
  OffsetFrequency frequency (FloatOfInt pitch$offset)
)

fun FrequenciesOfChord chord keysig = (
  //Returns a list representing the frequencies of the chord
  if Size chord$pitches == 0 then { 0.0 }
  else (
    freqs = float{}
    for pitch in chord$pitches do (
      freqs = freqs . { (FrequencyOfPitch pitch keysig) }
    )
    freqs
  )
)

fun FrequenciesOfChords chords keysig = (
  //Returns a list representing the frequencies of the chords
  freqs = float{}{}
  for chord in chords do (
    freqs = freqs . { (FrequenciesOfChord chord keysig) }
  )
  freqs
)

fun SecondsOfDurations durations timesig tempo = (
  //Returns a list consisting of the durations represented as seconds
  multiplier = FloatOfInt timesig$lower * 60.0 / FloatOfInt tempo
  seconds = float{}
  for duration in durations do (
    seconds = seconds . { (duration * multiplier) }
  )
  seconds
)

fun Arpeggio chord = (
  //Returns an array of chords representing the arpeggio using the pitches from chord
  chord$pitches
)

fun Rhythms track = (
  //Returns the array of note durations of the track
  track$durations
)

fun Chords track = (
  // Returns the array of chords of the track
  track$chords
)

fun Parallel ts = (
  //Returns a song object with the tracks aligned in parallel (to be played concurrently)
  s = init song
  for t in ts do (
    s$tracks = s$tracks . { {t} }
    s$volumes = s$volumes . { 1.0 }
  )
  s
)

fun Sequential ts = (
  //Returns a song object with the tracks aligned in a single sequence (to be played sequentially)
  init song { tracks = {ts} }
)

fun Length track = (
  //Returns the duration of the track
  length = 0.0
  for d in track$durations do length = length + d
  length
)

fun Extend length tr = (
  //Returns a track object that repeats the given track for length units. If len is not an 
  //even multiple of the Length tr, the remainder is padded with rests
  multiplier = length / Length tr
  // Add as many copies of the track as will fit
  orig_chords = tr$chords; orig_durations = tr$durations
  for i in Range 0 (IntOfFloat multiplier - 1) do (
    Ignore i
    tr$chords = tr$chords . orig_chords
    tr$durations = tr$durations . orig_durations
  )
  // Fill the rest of the space with a rest
  pad = length - Length tr
  if pad > 0.0 then (
    tr$chords = tr$chords . { (init chord) }
    tr$durations = tr$durations . [ pad ]
  ) else ()
  tr
)

fun StartWith tr base_track = (
  //Returns a track with the start of base_track replaced with tr
    Reverse (EndWith (Reverse tr) (Reverse base_track))
)

fun EndWith tr base_track = (
  //Returns a track with the end of base_track replaced with tr
  RemoveEnd (Length tr) base_track . tr
)

fun Reverse tr = (
  //Returns the track with all the notes reversed
  init track{time_sig = tr$time_sig; key_sig = tr$key_sig; tempo=tr$tempo
  chords = (ReverseList tr$chords); durations = (ReverseList tr$durations)}
)

fun OctaveChordList shift ch = (
  //Returns the chord object shifted by num octaves
  rel_chords = chord{}
  for c in ch do
    rel_chords = rel_chords . {(AddChordNum (shift * Size key_sig$scale) c key_sig)}
  rel_chords
)

fun Relative shift tr = (
  //Returns a track with all the notes shifted up by shift 
  rel_chords = chord{}
  for c in tr$chords do
    rel_chords = rel_chords . {(AddChordNum shift c tr$key_sig)}
  tr$chords = rel_chords
  tr
)

fun Octave shift tr = (
  //Returns the track object shifted by shift octaves.
  Relative (shift*(Size tr$key_sig$scale)) tr
)

fun Repeat times tr = (
  //Returns a track object with the given track repeated times number of times
  if times <= 1 then
    tr
  else
    tr . Repeat (times - 1) tr
)

fun RemoveEnd len tr = (
  //Returns a track with the last $len$ duration of $tr$ sliced off
  dur = (Length tr) - len
  if dur < 0.0 then
    (throw "Remove End length is too long"; tr)
  else(
    notes = tr$chords
    durations = tr$durations
    out_chords = chord{}
    out_dur = float{}
    for i in Range 0 (Size notes) do (
      if dur <= 0.0 then
        ()
      else( 
        to_add = durations.(i)
        out_dur = out_dur . {(Min dur to_add)}
        dur = dur - to_add
        out_chords = out_chords . {notes.(i)}
      )
    )
    tr$durations = out_dur
    tr$chords = out_chords
    tr
  )
)

// TODO: volume mix functions for song objects

